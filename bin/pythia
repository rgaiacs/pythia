#!/usr/bin/env python
import argparse
import logging
import os.path
import time

from pythia import io
from pythia import svm
from pythia import util

logging.basicConfig(
    level=logging.NOTSET,
    format='%(message)s'
)
logger = logging.getLogger(__name__)

def kfold(args):
    data_filename = args.data
    random_state = int(args.random_seed)

    util.kfold(
        data_filename,
        shuffle=True,
        random_state=random_state
    )

def fit(args):
    image_folder = args.image_folder
    data_filename = args.data
    clf_output = args.clf
    
    logger.info('Fitting data ...')
    svc = svm.SVC(
        data_filename,
        image_folder
    )
    logger.info('Fitting data complete!')
    logger.info('Saving classifier ...')
    io.clfsave(
        clf_output,
        svc
    )
    logger.info('Saving classifier complete!')
    

def test(args):
    image_folder = args.image_folder
    data_filename = args.data
    clf_filename = args.clf
    predictions_filename = args.predictions
    predictions = []

    clf = io.clfread(clf_filename)

    sections, classifications = util.collection2sections_and_classes(
        data_filename,
        image_folder
    )

    for i in range(len(classifications)):
        predictions.append(clf.predict_sample(
            sections[i]
        ))


    with open(predictions_filename, "w") as _file:
        _file.write("manual,prediction\n")
        for i in range(len(classifications)):
            _file.write("{},{}\n".format(
                classifications[i],
                predictions[i]
            ))

def crop(args):
    image_filename = os.path.basename(args.image)
    image_abspath = os.path.abspath(args.image)
    output_folder = args.output_folder
    section_size = int(args.size)
    i = 0
    j = 0
    k = 1

    logger.info('Loading image ...')
    image = io.imread(
        image_abspath
    )
    logger.info('Loading image complete!')

    while (i + 1) * section_size < image.shape[0]:
        i_floor = i * section_size
        i_ceil = (i + 1) * section_size
        while (j + 1) * section_size < image.shape[1]:
            j_floor = j * section_size
            j_ceil = (j + 1) * section_size

            filename = "{}.{}.jpg".format(
                image_filename,
                k
            )
            io.imsave(
                os.path.join(
                    output_folder,
                    filename
                )
                image[
                    i_floor:i_ceil,
                    j_floor:j_ceil
                ]
            )

            k = k + 1
            j = j + 1
        j = 0
        i = i + 1

def predict(args):
    clf_input = args.clf_input
    image_filename = args.image
    
    logger.info('Loading classifier ...')
    clf = io.clfread(
        clf_input
    )
    logger.info('Loading classifier complete!')
    logger.info('Loading image ...')
    image = io.imread(
        image_filename
    )
    logger.info('Loading image complete!')
    logger.info('Predicting image ...')
    prediction = clf.predict_sample(
        image
    )
    logger.info('Predicting image complete')
    print("Image is {}".format(prediction))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='CRIC SVM.'
    )
    subparsers = parser.add_subparsers()
    
    parser.add_argument(
        '--clock',
        action='store_true',
        help='Clock time of operation'
    )
    parser.add_argument(
        '--verbose',
        '-v',
        action='store_true',
        help='Enable verbose mode'
    )
    
    # Parser for K-Folds cross-validator
    parser_kfold = subparsers.add_parser('kfold')
    parser_kfold.add_argument(
        '--data',
        default="classifications.json",
        help='K-Folds cross-validator generator'
    )
    parser_kfold.add_argument(
        '--random-seed',
        default=1,
        help='int used as the seed used by the random number generator'
    )
    parser_kfold.set_defaults(
        func=kfold
    )

    # Parser for training
    parser_fit = subparsers.add_parser('fit')
    parser_fit.add_argument(
        '--image-folder',
        default="img",
        help='Image folder for training'
    )
    parser_fit.add_argument(
        '--data',
        default="classifications.json",
        help='Data for training in JSON format'
    )
    parser_fit.add_argument(
        '--clf',
        default="cric-svm.joblist",
        help='Output file with the SVM classifier'
    )
    parser_fit.set_defaults(
        func=fit
    )

    # Parser for test
    parser_test = subparsers.add_parser('test')
    parser_test.add_argument(
        '--image-folder',
        default="img",
        help='Image folder for test'
    )
    parser_test.add_argument(
        '--data',
        default="classifications.json",
        help='Data for test in JSON format'
    )
    parser_test.add_argument(
        '--clf',
        default="cric-svm.joblist",
        help='File with the SVM classifier'
    )
    parser_test.add_argument(
        '--predictions',
        default="predictions.csv",
        help='Predictions for the test'
    )
    parser_test.set_defaults(
        func=test
    )
    
    # Parser for crop image into sections
    parser_crop = subparsers.add_parser('crop')
    parser_crop.add_argument(
        '--image',
        default="sample.png",
        help='Input image file to be crop'
    )
    parser_crop.add_argument(
        '--size',
        default=100,
        help='Size for width x height of each cropped section'
    )
    parser_crop.add_argument(
        '--output-folder',
        default=".",
        help='Folder to create the cropped sections of the image'
    )
    parser_crop.set_defaults(
        func=crop
    )

    # Parser for predict
    parser_predict = subparsers.add_parser('predict')
    parser_predict.add_argument(
        '--clf-input',
        default="cric-svm.joblist",
        help='Input file with the SVM classifier'
    )
    parser_predict.add_argument(
        '--image',
        default="sample.png",
        help='Input image file to be classifier'
    )
    parser_predict.set_defaults(
        func=predict
    )
    
    args = parser.parse_args()
    
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.WARNING)
        
    if args.clock:
        t0 = time.time()
    
    args.func(args)
    
    if args.clock:
        print(
            """{} seconds wall time""".format(
                time.time() - t0
            )
        )